import streamlit as st
import pandas as pd
import numpy as np
import pydeck as pdk
import folium
from streamlit_folium import folium_static
import json
from branca.element import Figure

# Set page title and configuration
st.set_page_config(
    page_title="Fire Sensor Monitoring System",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .sensor-normal { color: #4ade80; }
    .sensor-warning { color: #facc15; }
    .sensor-abnormal { color: #f87171; }
    .fire-alert { 
        background-color: #fee2e2; 
        border-left: 5px solid #ef4444;
        padding: 1rem;
        margin-bottom: 1rem;
        animation: pulse 1.5s infinite;
    }
    @keyframes pulse {
        0% { opacity: 0.8; }
        50% { opacity: 1; }
        100% { opacity: 0.8; }
    }
    .evacuation-info {
        background-color: #dbeafe;
        border-left: 5px solid #3b82f6;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    .dashboard-header {
        padding: 1rem 0;
        margin-bottom: 1rem;
        border-bottom: 1px solid #e5e7eb;
    }
    .sensor-hover {
        font-weight: bold;
        background-color: #f3f4f6;
        padding: 0.5rem;
        border-radius: 0.25rem;
        transition: all 0.3s;
    }
</style>
""", unsafe_allow_html=True)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏ï‡∏õ‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏≤‡∏ö‡∏Ø
DISTRICT_COORDINATES = {
    "pomprap": [13.7539, 100.5156],  # ‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£-‡∏õ‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏≤‡∏ö (Lat, Lng)
}

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∏‡∏î‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏õ‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏≤‡∏ö‡∏Ø
pomprap_sensors = [
    {"id": 1, "name": "Sensor A1", "location": "Soi Nana - North", "coordinates": [13.7414, 100.5194], "status": "normal", "battery_level": 85},
    {"id": 2, "name": "Sensor A2", "location": "Yaowarat Road", "coordinates": [13.7393, 100.5129], "status": "normal", "battery_level": 72},
    {"id": 3, "name": "Sensor A3", "location": "Ratchadaphisek Road", "coordinates": [13.7354, 100.5154], "status": "normal", "battery_level": 90},
    {"id": 4, "name": "Sensor A4", "location": "Chakraphet Road", "coordinates": [13.7412, 100.5089], "status": "normal", "battery_level": 65},
    {"id": 5, "name": "Sensor A5", "location": "Charoen Krung Road", "coordinates": [13.7380, 100.5210], "status": "normal", "battery_level": 78},
    {"id": 6, "name": "Sensor A6", "location": "Pom Prap Market", "coordinates": [13.7380, 100.5129], "status": "normal", "battery_level": 55},
    {"id": 7, "name": "Sensor A7", "location": "Wat Saket Temple", "coordinates": [13.7401, 100.5175], "status": "normal", "battery_level": 82},
    {"id": 8, "name": "Sensor A8", "location": "Local School", "coordinates": [13.7365, 100.5165], "status": "normal", "battery_level": 93},
    {"id": 9, "name": "Sensor A9", "location": "Community Hospital", "coordinates": [13.7385, 100.5115], "status": "normal", "battery_level": 87},
    {"id": 10, "name": "Sensor A10", "location": "Shopping Center", "coordinates": [13.7425, 100.5145], "status": "normal", "battery_level": 71},
]

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
DISTRICT_SENSORS = {
    "pomprap": pomprap_sensors
}

# ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Streamlit
def get_sensors_df(district, active_fire_sensor=None):
    sensors = DISTRICT_SENSORS.get(district, [])
    df = pd.DataFrame(sensors)
    
    # ‡πÅ‡∏¢‡∏Å coordinates ‡πÄ‡∏õ‡πá‡∏ô lat, lon columns
    if not df.empty:
        df["lat"] = df["coordinates"].apply(lambda x: x[0])
        df["lon"] = df["coordinates"].apply(lambda x: x[1])
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if active_fire_sensor:
            df.loc[df["id"] == active_fire_sensor, "status"] = "abnormal"
    
    return df

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ Folium
def create_folium_map(district, sensors_df, active_fire_sensor=None, incident_location=None):
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    center = DISTRICT_COORDINATES.get(district, [13.7539, 100.5156])
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    m = folium.Map(location=center, zoom_start=15, tiles="OpenStreetMap")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    for _, sensor in sensors_df.iterrows():
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if active_fire_sensor and sensor['id'] == active_fire_sensor:
            color = 'red'
            radius = 10
            fill_opacity = 0.8
            popup_html = f"""
            <div style='font-family: Arial; width: 200px;'>
                <h4 style='color: #d00; margin-bottom: 5px;'>{sensor['name']} - FIRE ALERT! üî•</h4>
                <p><b>Location:</b> {sensor['location']}</p>
                <p><b>Status:</b> <span style='color: red; font-weight: bold;'>ABNORMAL</span></p>
                <p><b>Battery:</b> {sensor['battery_level']}%</p>
            </div>
            """
        else:
            if sensor['status'] == 'normal':
                color = 'green'
            elif sensor['status'] == 'warning':
                color = 'orange'
            else:
                color = 'red'
            radius = 6
            fill_opacity = 0.6
            popup_html = f"""
            <div style='font-family: Arial; width: 180px;'>
                <h4 style='margin-bottom: 5px;'>{sensor['name']}</h4>
                <p><b>Location:</b> {sensor['location']}</p>
                <p><b>Status:</b> <span style='color: {color}; font-weight: bold;'>{sensor['status'].upper()}</span></p>
                <p><b>Battery:</b> {sensor['battery_level']}%</p>
            </div>
            """
        
        folium.CircleMarker(
            location=[sensor['lat'], sensor['lon']],
            radius=radius,
            color=color,
            fill=True,
            fill_color=color,
            fill_opacity=fill_opacity,
            popup=folium.Popup(popup_html, max_width=200)
        ).add_to(m)
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏û‡∏¢‡∏û
    if incident_location:
        folium.Circle(
            location=incident_location,
            radius=200,  # ‡∏£‡∏±‡∏®‡∏°‡∏µ 200 ‡πÄ‡∏°‡∏ï‡∏£
            color='red',
            fill=True,
            fill_color='red',
            fill_opacity=0.2,
            popup='Evacuation Zone - 200m'
        ).add_to(m)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏
        folium.Marker(
            location=incident_location,
            icon=folium.Icon(color='red', icon='fire', prefix='fa'),
            popup='Fire Incident Location'
        ).add_to(m)
    
    return m

# ‡∏™‡∏£‡πâ‡∏≤‡∏á sidebar
st.sidebar.title("‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏¥‡∏á‡πÑ‡∏´‡∏°‡πâ")
st.sidebar.subheader("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
district = st.sidebar.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï",
    options=list(DISTRICT_COORDINATES.keys()),
    format_func=lambda x: "‡πÄ‡∏Ç‡∏ï‡∏õ‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏≤‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡πà‡∏≤‡∏¢" if x == "pomprap" else x,
    index=0
)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á
simulate_fire = st.sidebar.checkbox("‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ", value=False)

# ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÑ‡∏ü
active_fire_sensor = None
incident_location = None

if simulate_fire:
    sensor_options = {f"{s['name']} ({s['location']})": s['id'] for s in DISTRICT_SENSORS[district]}
    selected_sensor_key = st.sidebar.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÑ‡∏ü",
        options=list(sensor_options.keys())
    )
    active_fire_sensor = sensor_options[selected_sensor_key]
    
    # ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    for sensor in DISTRICT_SENSORS[district]:
        if sensor['id'] == active_fire_sensor:
            incident_location = sensor['coordinates']
            break

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
sensors_df = get_sensors_df(district, active_fire_sensor)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
st.markdown("<h1 class='dashboard-header'>‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏¥‡∏á‡πÑ‡∏´‡∏°‡πâ‡πÄ‡∏Ç‡∏ï‡∏õ‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏≤‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡πà‡∏≤‡∏¢</h1>", unsafe_allow_html=True)

# ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ
if simulate_fire and active_fire_sensor:
    selected_sensor = next((s for s in DISTRICT_SENSORS[district] if s['id'] == active_fire_sensor), None)
    
    if selected_sensor:
        st.markdown(f"""
        <div class='fire-alert'>
            <h2>üî• ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ! üî•</h2>
            <p><b>‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå:</b> {selected_sensor['name']}</p>
            <p><b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</b> {selected_sensor['location']}</p>
            <p><b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> <span style='color: red; font-weight: bold;'>ABNORMAL</span></p>
            <p><b>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö:</b> {pd.Timestamp.now().strftime('%H:%M:%S')}</p>
        </div>
        
        <div class='evacuation-info'>
            <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏û‡∏¢‡∏û</h3>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏û‡∏¢‡∏û‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 200 ‡πÄ‡∏°‡∏ï‡∏£‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏</p>
            <p>‡∏à‡∏∏‡∏î‡∏≠‡∏û‡∏¢‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏∏‡∏°‡∏ä‡∏ô</p>
            <p>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: 199 (‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¥‡∏á), 1669 (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô)</p>
        </div>
        """, unsafe_allow_html=True)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
col1, col2 = st.columns([2, 1])

# ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 1
with col1:
    st.subheader("‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ Folium
    m = create_folium_map(district, sensors_df, active_fire_sensor, incident_location)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    folium_static(m, width=700, height=500)

# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 2
with col2:
    st.subheader("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå")
    
    # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
    for _, sensor in sensors_df.iterrows():
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if active_fire_sensor and sensor['id'] == active_fire_sensor:
            status_style = "abnormal"
            status_text = "ABNORMAL"
            emoji = "üî•"
        else:
            status_style = sensor['status']
            status_text = sensor['status'].upper()
            emoji = "‚úÖ" if sensor['status'] == "normal" else "‚ö†Ô∏è" if sensor['status'] == "warning" else "‚ùå"
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
        st.markdown(f"""
        <div class="sensor-card" id="sensor-{sensor['id']}">
            <p><b>{emoji} {sensor['name']}</b> - {sensor['location']}</p>
            <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <span class="sensor-{status_style}">{status_text}</span></p>
            <p>‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà: {sensor['battery_level']}%</p>
            <hr>
        </div>
        """, unsafe_allow_html=True)

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
status_counts = sensors_df['status'].value_counts()
normal_count = status_counts.get('normal', 0)
warning_count = status_counts.get('warning', 0)
abnormal_count = status_counts.get('abnormal', 0)
total_sensors = len(sensors_df)

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å
metric_cols = st.columns(4)
with metric_cols[0]:
    st.metric("‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_sensors)
with metric_cols[1]:
    st.metric("‡∏õ‡∏Å‡∏ï‡∏¥", normal_count, f"{normal_count/total_sensors*100:.1f}%")
with metric_cols[2]:
    st.metric("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", warning_count, f"{warning_count/total_sensors*100:.1f}%")
with metric_cols[3]:
    st.metric("‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", abnormal_count, f"{abnormal_count/total_sensors*100:.1f}%")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
st.subheader("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
battery_data = sensors_df[['name', 'battery_level']].sort_values('battery_level')
st.bar_chart(battery_data.set_index('name'))

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
st.markdown("""
### ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
1. ‡πÉ‡∏ä‡πâ sidebar ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
2. ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ"
3. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
4. ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏õ‡∏Å‡∏ï‡∏¥), ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô), ‡πÅ‡∏î‡∏á (‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥)

### ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
""")

# Footer
st.markdown("<hr>", unsafe_allow_html=True)
st.markdown("¬© 2025 ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏¥‡∏á‡πÑ‡∏´‡∏°‡πâ‡πÄ‡∏Ç‡∏ï‡∏õ‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏≤‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡πà‡∏≤‡∏¢", unsafe_allow_html=True)